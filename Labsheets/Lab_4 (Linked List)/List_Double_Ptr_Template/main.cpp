#include"List_Double_Ptr_Template.h"
using namespace std;
/* Program entry point. */
int main()
{	
	List_Double_Ptr_Template<int> l1;
	l1.push_back(10);
	l1.push_back(20);
	l1.push_back(20);
	l1.push_back(20);
	l1.push_back(50);
	l1.push_back(60);
	l1.push_back(70);
	cout << "l1:size:" << l1.size();
	Iterator_Node<int> j(l1.begin());
	cout << l1;
	++j;
	Iterator_Node<int> s(j);
	s=l1.erase(j);
	cout << "\n After erassing 1.\n";
	cout << l1;
	cout << "\nl1:size:" << l1.size()<<"\n";
	Iterator_Node<int> k(l1.begin());
	++k; ++k; ++k; ++k;
	Iterator_Node<int> t(l1.begin());
	t = l1.erase(k);
	cout << *t;
	++s, ++s;
	Iterator_Node<int> f(s);
	f=l1.erase(s,t);
	cout << "\n After erassing 2.\n";
	cout << l1;
	cout << "overloaded Constructor";List_Double_Ptr_Template<int> l2(5, 10);
	cout << l2;
	Iterator_Node<int> m(l1.begin());l1.insert(m,33);
	cout << *m;
	cout << *t;
	++m;
	l1.insert(m,33);
	Iterator_Node<int> g(l1.end());
	l1.insert(g,33);
	List_Double_Ptr_Template<int> l3(m,t);
	cout << "\nl3 :"<<l3;List_Double_Ptr_Template<int> l4(l3);
	cout << "L4 :" << l4;
	cout<<l4;
	cout << "L4 after Clear";
	l4.clear();cout << l4;
	cout<<"Swap";
	l1.swap(l2);
	cout<<"l1 :"<<l1<<"l2 :"<<l2;l2.remove(20);
	cout << "l2" << l2;List_Double_Ptr_Template<int> l5;
	l5.push_back(10);
	l5.push_back(20);
	l5.push_back(30);
	l5.push_back(10);
	l5.push_back(20);
	l5.push_back(30);
	l5.push_back(40);
	l5.push_back(30);
	cout << "l5:" << l5;
	cout << "\nl5:size:" << l5.size() << "\n";
	Iterator_Node<int> p(l5.begin());
	cout << *p;
	p++;
	Iterator_Node<int> h(l2.begin());
	++h; ++h; ++h;
	Iterator_Node<int> o(l2.begin());
	l5.splice(p, l2,o,h);
	cout << "\nspliced l5";
	cout << l5;
	cout << "reverse of l5 :";
	l5.reverse();
	cout<< l5;
	cout << l5.size();
	l5.unique();
	cout << "\n l5: " << l5;
	cout << l5.size();
	l5.sort();
	cout << l5;
	cout << l2;
	cout<<"end";
	return 0;
}
